---
- name: Setup Stage 5b Environment
  hosts: hng
  become: yes
  vars:
    db_admin_user: "postgres"
    db_admin_password: "admin_password"
    rabbitmq_password: "rabbitmq_password"
    boilerplate_name: "boilerplate_db"
    env_variables:
      PROFILE: "local"
      NODE_ENV: "development"
      PORT: "3000"
      DB_USERNAME: "{{db_admin_user}}"
      DB_PASSWORD: "{{db_admin_password}}"
      DB_DATABASE: "{{boilerplate_name}}"
      DB_HOST: "localhost"
      DB_PORT: "5432"
      DB_ENTITIES: "dist/src/modules/**/entities/**/*.entity{.ts,.js}"
      DB_MIGRATIONS: "dist/**/migrations/*{.ts,.js}"
      DB_TYPE: "postgres"
      DB_SSL: "true"
      JWT_SECRET: "someSecrets"
      JWT_EXPIRY_TIMEFRAME: "3600"
  tasks:

    - name: Update apt cache and install dependencies
      ansible.builtin.apt:
        name:
          - nodejs
          - npm
          - postgresql
          - rabbitmq-server
          - nginx
        state: present
        update_cache: yes

    - name: Create hng user with sudo privileges
      ansible.builtin.user:
        name: hng
        state: present
        shell: /bin/bash
        groups: sudo

    - name: Ensure /opt directory exists
      ansible.builtin.file:
        path: /opt
        state: directory

    - name: Change ownership of /opt directory
      ansible.builtin.file:
        path: /opt
        state: directory
        owner: hng
        group: hng

    - name: Create destination directory for cloning
      ansible.builtin.file:
        path: /opt/stage_5b
        state: directory
        owner: hng
        group: hng

    - name: Add /opt/stage_5b as a safe directory for Git
      ansible.builtin.shell:
        cmd: git config --global --add safe.directory /opt/stage_5b

    - name: Clone the DevOps branch of the repository
      ansible.builtin.git:
        repo: 'https://github.com/hngprojects/hng_boilerplate_nestjs'
        dest: /opt/stage_5b
        version: devops

    - name: Ensure PostgreSQL service is running
      ansible.builtin.systemd:
        name: postgresql
        state: started
        enabled: yes

    - name: Create PostgreSQL database
      ansible.builtin.shell:
        cmd: sudo -u postgres psql -c "CREATE DATABASE {{ boilerplate_name }};"
        creates: /var/lib/postgresql/data/{{ boilerplate_name }}

    - name: Ensure /var/secrets directory exists
      ansible.builtin.file:
        path: /var/secrets
        state: directory
        mode: '0700'

    - name: Save PostgreSQL credentials
      ansible.builtin.copy:
        dest: /var/secrets/pg_pw.txt
        content: "{{ db_admin_password }}"
        mode: '0600'

    - name: Set RabbitMQ default user and password
      ansible.builtin.shell:
        cmd: rabbitmqctl change_password guest {{ rabbitmq_password }}

    - name: Ensure Nginx directories exist
      ansible.builtin.file:
        path: /etc/nginx/sites-available
        state: directory

    - name: Ensure Nginx sites-enabled directory exists
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled
        state: directory

    - name: Configure Nginx
      ansible.builtin.copy:
        content: |
          server {
            listen 80;
            server_name _;
            location / {
              proxy_pass http://127.0.0.1:3000;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
            }
          }
        dest: /etc/nginx/sites-available/stage_5b
        mode: '0644'

    - name: Enable Nginx configuration
      ansible.builtin.file:
        src: /etc/nginx/sites-available/stage_5b
        dest: /etc/nginx/sites-enabled/stage_5b
        state: link

    - name: Remove default Nginx configuration
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Restart Nginx
      ansible.builtin.service:
        name: nginx
        state: restarted

    - name: Ensure /var/log/stage_5b directory exists
      ansible.builtin.file:
        path: /var/log/stage_5b
        state: directory
        mode: '0755'

    - name: Set up logging for stderr
      ansible.builtin.shell:
        cmd: |
          echo '*.* /var/log/stage_5b/error.log' >> /etc/rsyslog.d/stage_5b.conf
          systemctl restart rsyslog

    - name: Set up logging for stdout
      ansible.builtin.shell:
        cmd: |
          echo '*.* /var/log/stage_5b/out.log' >> /etc/rsyslog.d/stage_5b.conf
          systemctl restart rsyslog

    - name: Clean npm cache
      ansible.builtin.shell:
        cmd: npm cache clean --force
        chdir: /opt/stage_5b

    - name: Remove node_modules if it exists
      ansible.builtin.file:
        path: /opt/stage_5b/node_modules
        state: absent

    - name: Remove package-lock.json if it exists
      ansible.builtin.file:
        path: /opt/stage_5b/package-lock.json
        state: absent

    - name: Install PM2 globally
      ansible.builtin.npm:
        name: pm2
        global: yes

    - name: Install NestJS CLI globally
      ansible.builtin.npm:
        name: '@nestjs/cli'
        global: yes

    - name: Install project dependencies
      ansible.builtin.shell:
        cmd: npm install
        chdir: /opt/stage_5b

    - name: Create .env file
      ansible.builtin.copy:
        dest: /opt/stage_5b/.env
        content: |
          PROFILE={{ env_variables.PROFILE }}
          NODE_ENV={{ env_variables.NODE_ENV }}
          PORT={{ env_variables.PORT }}
          DB_USERNAME={{ env_variables.DB_USERNAME }}
          DB_PASSWORD={{ env_variables.DB_PASSWORD }}
          DB_DATABASE={{ env_variables.DB_DATABASE }}
          DB_HOST={{ env_variables.DB_HOST }}
          DB_PORT={{ env_variables.DB_PORT }}
          DB_ENTITIES={{ env_variables.DB_ENTITIES }}
          DB_MIGRATIONS={{ env_variables.DB_MIGRATIONS }}
          DB_TYPE={{ env_variables.DB_TYPE }}
          DB_SSL={{ env_variables.DB_SSL }}
          JWT_SECRET={{ env_variables.JWT_SECRET }}
          JWT_EXPIRY_TIMEFRAME={{ env_variables.JWT_EXPIRY_TIMEFRAME }}
        mode: '0600'

    - name: Build the application
      ansible.builtin.shell:
        cmd: |
          cd /opt/stage_5b
          npm run build

    - name: Run the application in production using PM2
      ansible.builtin.shell:
        cmd: |
          cd /opt/stage_5b
          pm2 start dist/src/main.js --name stage_5b --log /var/log/stage_5b/out.log --error /var/log/stage_5b/error.log
